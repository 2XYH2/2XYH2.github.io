<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ STL(Standad Template Library)</title>
    <url>/2025/03/22/C++%20STL(Standad%20Template%20Library)/</url>
    <content><![CDATA[<h1 id="一、vector"><a href="#一、vector" class="headerlink" title="一、vector"></a>一、vector</h1><h2 id="1-vector-基本概念"><a href="#1-vector-基本概念" class="headerlink" title="1. vector 基本概念"></a>1. vector 基本概念</h2><p><code>vector</code> 是 C++ 标准模板库（STL）中的一个容器类，用于存储动态数组。与普通数组不同，<code>vector</code> 可以根据需要自动调整其大小，并且提供了许多方便的成员函数来操作存储的元素</p>
<h2 id="2-常见的vector容器操作"><a href="#2-常见的vector容器操作" class="headerlink" title="2. 常见的vector容器操作"></a>2. 常见的vector容器操作</h2><p><code>vector</code>容量的本质是内存中连续分配元素的内存空间数量，容量必须是整数，无法存在“半个元素”的空间，且实际计算通过整数运算完成</p>
<ol>
<li><strong>迭代器：</strong>是一个类，可以当作为广义指针（功能比普通指针强大）</li>
<li><strong>begin()：</strong>是一个 <code>vector</code>容器的一个成员函数，用于返回容器首元素的迭代器（准确的说法是返回迭代器类的对象）</li>
<li><strong>end()：</strong>是一个 <code>vector</code>容器的一个成员函数，用于返回容器尾元素后一位内存的迭代器（准确的说法是返回迭代器类的对象）</li>
<li><strong>front()：</strong>是一个 <code>vector</code>容器的一个成员函数，用于返回容器首元素的值</li>
<li><strong>back()：</strong>是一个 <code>vector</code>容器的一个成员函数，用于返回容器尾元素的值</li>
<li><strong>capacity()：</strong>是一个 <code>vector</code>容器的一个成员函数，用于返回容器的容量大小（整个容器所占的内存空间）</li>
<li><strong>push_back：</strong>是一个 <code>vector</code>容器的一个成员函数，用于在容器的尾元素后一位添加一个新的元素，如果<code>v.push_back(一个元素)</code>后，超过<code>vector</code>原本的容量，<code>vector</code>容器就会(<code>VS</code>)1.5倍或(<code>GCC</code>)2倍扩容，（整数运算）公式：<code>new_capacity = old_capacity + old_capacity / 2</code>（原因：减少了重新分配内存的次数，同时避免了过多的内存浪费）</li>
<li><strong>pop_back：</strong>是一个<code>vector</code>容器的一个成员函数，用于删除容器的尾元素（<code>v.pop_back()</code>）</li>
</ol>
<p><strong>代码示例</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 使用初始化列表创建一个 vector，包含 4 个元素：2, 0, 2, 5</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; v = &#123; <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span> &#125;;<br><br>    <span class="hljs-comment">// 在 vector 末尾删除一个元素 5</span><br>    v.<span class="hljs-built_in">pop_back</span>();<br><br>    <span class="hljs-comment">// 输出 vector 的当前容量</span><br>    cout &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 在 vector 末尾添加一个元素 2</span><br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br><br>    <span class="hljs-comment">// 在 vector 末尾添加一个元素 5</span><br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br><br>    <span class="hljs-comment">// 输出 vector 添加元素后的容量</span><br>    cout &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 输出 vector 第一个元素的值</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;begin: &quot;</span> &lt;&lt; *v.<span class="hljs-built_in">begin</span>() &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 输出 vector 最后一个元素的值</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;end: &quot;</span> &lt;&lt; *(v.<span class="hljs-built_in">end</span>() - <span class="hljs-number">1</span>) &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 输出 vector 第一个元素的值（与 begin() 相同）</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;front: &quot;</span> &lt;&lt; v.<span class="hljs-built_in">front</span>() &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 输出 vector 最后一个元素的值（与 end() - 1 相同）</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;back: &quot;</span> &lt;&lt; v.<span class="hljs-built_in">back</span>() &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="3-vector-对象创建"><a href="#3-vector-对象创建" class="headerlink" title="3. vector 对象创建"></a>3. vector 对象创建</h2><p><code>vector</code>创建对象的方式有6种：</p>
<ol>
<li><strong>默认构造函数：</strong>创建一个空的<code>vector</code>，没有任何元素（数据）</li>
<li><strong>初始化列表：</strong>用一组初始值创建<code>vector</code>，可以用间接初始化或直接初始化</li>
<li><strong>迭代器：</strong>用另一个<code>vector</code>的一部分或全部元素创建新的<code>vector</code></li>
<li><strong>全0初始化：</strong>创建一个指定大小的<code>vector</code>，所有的元素初始化为 0</li>
<li><strong>指定大小和初始值：</strong><code>vector&lt;int&gt; 变量名(a, b);</code>申请<code>a</code>个空间的元素，每个元素的值初始化为<code>b</code></li>
<li><strong>拷贝构造函数</strong>：用另一个<code>vector</code>创建新的<code>vector</code>，内容完全相同</li>
</ol>
<p><strong>代码示例</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator iter = v.<span class="hljs-built_in">begin</span>(); iter != v.<span class="hljs-built_in">end</span>(); ++iter)<br>    &#123;<br>        cout &lt;&lt; *iter &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 1.默认构造函数</span><br>    <span class="hljs-comment">// 创建一个空的 vector，没有任何元素</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;v1: &quot;</span>;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>    <span class="hljs-built_in">printVector</span>(v1);<br><br>    <span class="hljs-comment">// 2.初始化列表</span><br>    <span class="hljs-comment">// 用一组初始值创建 vector</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; v2_1 = &#123; <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span> &#125;; <span class="hljs-comment">// 间接初始化</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;v2_1: &quot;</span>;<br>    <span class="hljs-built_in">printVector</span>(v2_1);<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v2_2</span><span class="hljs-params">(&#123; <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span> &#125;)</span></span>; <span class="hljs-comment">// 直接初始化</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;v2_2: &quot;</span>;<br>    <span class="hljs-built_in">printVector</span>(v2_2);<br><br>    <span class="hljs-comment">// 3.迭代器</span><br>    <span class="hljs-comment">// 用另一个 vector 的一部分或全部元素创建新的 vector</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v3</span><span class="hljs-params">(v2_<span class="hljs-number">1.</span>begin(), v2_<span class="hljs-number">1.</span>end())</span></span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;v3: &quot;</span>;<br>    <span class="hljs-built_in">printVector</span>(v3);<br><br>    <span class="hljs-comment">// 4.全0初始化</span><br>    <span class="hljs-comment">// 创建一个指定大小的 vector，所有元素初始化为 0</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v4</span><span class="hljs-params">(<span class="hljs-number">8</span>)</span></span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;v4: &quot;</span>;<br>    <span class="hljs-built_in">printVector</span>(v4);<br><br>    <span class="hljs-comment">// 5.指定大小和初始值</span><br>    <span class="hljs-comment">// 5.vector&lt;int&gt; 变量名(a, b); 申请a个空间的元素，每个元素的值初始化为b</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v5</span><span class="hljs-params">(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>)</span></span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;v5: &quot;</span>;<br>    <span class="hljs-built_in">printVector</span>(v5);<br><br>    <span class="hljs-comment">// 6.拷贝构造函数</span><br>    <span class="hljs-comment">// 用另一个 vector 创建新的 vector，内容完全相同</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v6</span><span class="hljs-params">(v2_2)</span></span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;v6: &quot;</span>;<br>    <span class="hljs-built_in">printVector</span>(v6);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="二、algorithm"><a href="#二、algorithm" class="headerlink" title="二、algorithm"></a>二、algorithm</h1><h2 id="1-algorithm-基本概念"><a href="#1-algorithm-基本概念" class="headerlink" title="1. algorithm 基本概念"></a>1. algorithm 基本概念</h2><p><code>algorithm</code> 是 C++ 标准库中的一个头文件，包含了一组常用的算法函数。这些算法函数可以用于对容器中的元素进行操作，如排序、搜索、复制、替换等</p>
<h2 id="2-常见的算法函数"><a href="#2-常见的算法函数" class="headerlink" title="2. 常见的算法函数"></a>2. 常见的算法函数</h2><p>以下是一些常见的算法函数及其用途：</p>
<ol>
<li><code>sort</code>：对范围内的元素进行排序</li>
<li><code>find</code>：在范围内查找特定值</li>
<li><code>copy</code>：将范围内的元素复制到另一个范围</li>
<li><code>replace</code>：将范围内的特定值替换为另一个值</li>
<li><code>accumulate</code>：计算范围内元素的累积和（需要包含 <code>&lt;numeric&gt;</code> 头文件）</li>
</ol>
<p><strong>代码示例</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span> <span class="hljs-comment">// 包含 algorithm 头文件</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span>   <span class="hljs-comment">// 包含 numeric 头文件以使用 accumulate</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iterator&gt;</span>  <span class="hljs-comment">// 包含 iterator 头文件以使用 back_inserter</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>    <span class="hljs-comment">// 使用 std::sort 对向量进行排序</span><br>    <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;()); <span class="hljs-comment">// 降序排序</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;Sorted vector: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : v) &#123;<br>        cout &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 使用 std::find 查找元素</span><br>    <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">find</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">if</span> (it != v.<span class="hljs-built_in">end</span>()) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Element 3 found at position: &quot;</span> &lt;&lt; <span class="hljs-built_in">distance</span>(v.<span class="hljs-built_in">begin</span>(), it) &lt;&lt; endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Element 3 not found&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 使用 std::accumulate 计算元素的累积和</span><br>    <span class="hljs-type">int</span> sum = <span class="hljs-built_in">accumulate</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Sum of elements: &quot;</span> &lt;&lt; sum &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 使用 std::replace 替换元素</span><br>    <span class="hljs-built_in">replace</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">3</span>, <span class="hljs-number">10</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Vector after replacing 3 with 10: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : v) &#123;<br>        cout &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 使用 std::copy 复制元素到另一个 vector</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; destination;<br>    std::<span class="hljs-built_in">copy</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), std::<span class="hljs-built_in">back_inserter</span>(destination));<br>    cout &lt;&lt; <span class="hljs-string">&quot;Destination vector after copy: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : destination) &#123;<br>        cout &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在这个示例中：</p>
<ul>
<li><code>std::sort</code> 用于对向量 <code>v</code> 进行降序排序</li>
<li><code>std::find</code> 用于在向量 <code>v</code> 中查找元素 <code>3</code></li>
<li><code>std::accumulate</code> 用于计算向量 <code>v</code> 中所有元素的累积和</li>
<li><code>std::replace</code> 用于将向量 <code>v</code> 中的元素 <code>3</code> 替换为 <code>10</code></li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机入门基础</title>
    <url>/2024/08/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="一、-计算机硬件与冯·诺依曼架构的详细介绍"><a href="#一、-计算机硬件与冯·诺依曼架构的详细介绍" class="headerlink" title="一、 计算机硬件与冯·诺依曼架构的详细介绍"></a>一、 计算机硬件与冯·诺依曼架构的详细介绍</h1><h2 id="1-冯·诺依曼架构"><a href="#1-冯·诺依曼架构" class="headerlink" title="1. 冯·诺依曼架构"></a>1. 冯·诺依曼架构</h2><p>冯·诺依曼架构（Von Neumann Architecture）是现代计算机的基础架构。它由以下几个主要部分组成：</p>
<ul>
<li><strong>输入设备</strong>: 允许用户向计算机输入数据或指令，如键盘、鼠标、终端等。</li>
<li><strong>CPU（中央处理器）</strong>: 包含运算器和控制器两部分，是计算机的大脑，用于执行指令和处理数据。<ul>
<li><strong>运算器</strong>: 负责执行各种算术和逻辑运算。</li>
<li><strong>控制器</strong>: 负责控制整个计算机系统的操作，包括指令的读取、解释和执行。</li>
</ul>
</li>
<li><strong>外部存储器</strong>: 用于长期保存数据和程序（断电后不会丢失数据），如机械硬盘（HHD）、固态硬盘（SSD）、光盘、磁带等。</li>
<li><strong>输出设备</strong>: 将计算结果或信息传递给用户，如显示器、打印机、终端等。</li>
</ul>
<p>这类架构强调了数据和指令存储在同一存储器中，并通过相同的总线传输，因此也被称为“存储程序计算机”。</p>
<h2 id="2-计算机硬件"><a href="#2-计算机硬件" class="headerlink" title="2. 计算机硬件"></a>2. 计算机硬件</h2><p>计算机硬件可以分为以下几部分：</p>
<ul>
<li><p><strong>主板</strong>: 主板是计算机的核心硬件之一，连接了CPU、内存、存储设备、显卡等其他硬件。主板上的各种芯片和电路负责管理各部件之间的数据传输和协调工作。</p>
</li>
<li><p><strong>CPU（中央处理器）</strong>: CPU是计算机的核心处理单元，负责执行指令和处理数据。现代的CPU通常集成多个核心（多核），以提高计算性能。</p>
</li>
<li><p><strong>内存（RAM）</strong>: 内存是计算机的短期存储器，负责存储当前正在运行的程序和数据。它的速度非常快，但在关机断电时数据会丢失。</p>
</li>
<li><p><strong>硬盘</strong>: 硬盘是计算机的长期存储设备，用于存储操作系统、应用程序以及用户数据。常见的硬盘有机械硬盘（HDD）和固态硬盘（SSD），其中SSD的速度比HDD更快。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2024/07/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World !"></a>Hello World !</h1><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Hello World!</tag>
      </tags>
  </entry>
  <entry>
    <title>开始学习C++</title>
    <url>/2024/08/23/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0C++/</url>
    <content><![CDATA[<h1 id="一、头文件"><a href="#一、头文件" class="headerlink" title="一、头文件"></a>一、头文件</h1><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p> <code>iostream</code> 和 <code>stdio.h</code> 是 C++ 和 C 语言中分别用于输入输出操作的头文件。它们都提供了处理输入和输出的功能，但在实现方式和使用方式上有所不同。</p>
<ol>
<li><code>iostream</code> 是 C++ 标准库中的头文件，提供了输入输出流的功能。主要的输入输出操作由以下几个对象来完成：<ul>
<li><code>std::cin</code>：标准输入流，用于从键盘读取输入。</li>
<li><code>std::cout</code>：标准输出流，用于向屏幕输出信息。</li>
<li><code>std::cerr</code>：标准错误流，用于输出错误信息。</li>
<li><code>std::clog</code>：标准日志流，用于输出日志信息。</li>
</ul>
</li>
<li><p><code>stdio.h</code> 是 C 标准库中的头文件，提供了标准输入输出功能。它主要使用以下几个函数进行输入输出操作：</p>
<ul>
<li><p><code>printf</code>：用于格式化输出。</p>
</li>
<li><p><code>scanf</code>：用于格式化输入。</p>
</li>
<li><p><code>fputs</code> 和 <code>fgets</code>：用于文件的输入输出操作。</p>
</li>
<li><p><code>putchar</code> 和 <code>getchar</code>：用于单字符的输入输出。</p>
</li>
</ul>
</li>
</ol>
<h2 id="2、-主要区别"><a href="#2、-主要区别" class="headerlink" title="2、 主要区别"></a>2、 主要区别</h2><ol>
<li><p>语言特性:</p>
<ul>
<li><p><code>iostream</code> 是 C++ 的一部分，体现了面向对象的编程思想，使用了流的概念，提供了更灵活的操作。</p>
</li>
<li><p><code>stdio.h</code> 是 C 的一部分，采用了传统的函数调用和格式化字符串来进行输入输出操作，符合过程化编程的风格。</p>
</li>
</ul>
</li>
<li><p>类型安全:</p>
<ul>
<li><p><code>iostream</code> 的操作符 (<code>&lt;&lt;</code> 和 <code>&gt;&gt;</code>) 是类型安全的，可以自动识别类型，不需要像 <code>printf</code> 和 <code>scanf</code> 那样指定格式符。</p>
</li>
<li><p><code>stdio.h</code> 中的 <code>printf</code> 和 <code>scanf</code> 需要明确指定格式符，如果格式符与变量类型不匹配，可能会导致运行时错误。</p>
</li>
</ul>
</li>
<li><p>灵活性和可扩展性:</p>
<ul>
<li><p><code>iostream</code> 提供了重载和自定义操作符的能力，可以扩展对自定义类型的支持。</p>
</li>
<li><p><code>stdio.h</code> 则较为固定，不容易扩展，需要手动处理字符串格式。</p>
</li>
</ul>
</li>
<li><p>性能:</p>
<ul>
<li><p>在一些情况下，<code>stdio.h</code> 的函数可能比 <code>iostream</code> 的流操作更快，因为 <code>stdio.h</code> 更接近底层硬件操作，开销较小。</p>
</li>
<li><p><code>iostream</code> 在处理复杂的 I/O 操作时更为便捷和灵活。</p>
</li>
</ul>
</li>
</ol>
<h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p><code>iostream</code> 和 <code>stdio.h</code> 都是用于处理输入输出的头文件，但它们分别属于 C++ 和 C 语言的标准库，反映了两种编程语言的不同编程风格和设计理念。</p>
<ol>
<li><p><strong>语言特性</strong>：<code>iostream</code> 体现了面向对象编程的思想，采用流的概念，使输入输出操作更加灵活，而 <code>stdio.h</code> 则符合过程化编程的风格，更加直接和接近底层操作。</p>
</li>
<li><p><strong>类型安全</strong>：<code>iostream</code> 的操作符是类型安全的，可以自动识别数据类型，避免了 <code>stdio.h</code> 中 <code>printf</code> 和 <code>scanf</code> 需要手动指定格式符带来的潜在风险。</p>
</li>
<li><p><strong>灵活性与扩展性</strong>：<code>iostream</code> 通过操作符重载提供了对自定义类型的扩展能力，而 <code>stdio.h</code> 的功能则相对固定，需要手动处理格式化字符串。</p>
</li>
<li><p><strong>性能</strong>：在某些情况下，<code>stdio.h</code> 可能表现出更好的性能，因为它的函数设计更加简洁和直接，但 <code>iostream</code> 在处理复杂的 I/O 操作时更加便捷。</p>
</li>
</ol>
<p>总体而言，<code>iostream</code> 更适合于需要灵活性和类型安全的 C++ 开发，而 <code>stdio.h</code> 则适用于对性能有更高要求的简单输入输出操作或在 C 语言环境中工作。</p>
<h1 id="二、命名空间"><a href="#二、命名空间" class="headerlink" title="二、命名空间"></a>二、命名空间</h1><p>命名空间（Namespace）是C++中的一种用于组织代码的机制，主要作用是避免命名冲突。随着程序规模的扩大，不同的库或模块中可能会定义相同名称的变量、函数、类等。命名空间通过提供一个独立的作用域，使得相同名字的标识符可以在不同的命名空间中共存，而不会发生冲突。</p>
<h2 id="1-、命名空间的定义与使用"><a href="#1-、命名空间的定义与使用" class="headerlink" title="1 、命名空间的定义与使用"></a>1 、命名空间的定义与使用</h2><ol>
<li><p><strong>定义命名空间</strong></p>
<ul>
<li><p>命名空间通过 <code>namespace</code> 关键字来定义。其基本语法如下：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">namespace</span> 命名空间名称 <br>&#123;<br>    <span class="hljs-comment">// 在此处定义的所有标识符都属于该命名空间</span><br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>例如，定义一个名为 <code>MyNamespace</code> 的命名空间：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">namespace</span> Mynamespace <br>&#123;<br>    <span class="hljs-type">int</span> my_variable = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_function</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 函数体</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>访问命名空间中的成员</strong></p>
<ul>
<li><p>要访问命名空间中的成员，需要使用 <code>命名空间名称::成员名称</code> 的形式。例如：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> value = MyNamespace::my_variable;<br>MyNamespace::<span class="hljs-built_in">my_function</span>();<br></code></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="2、using关键字的使用方法"><a href="#2、using关键字的使用方法" class="headerlink" title="2、using关键字的使用方法"></a>2、using关键字的使用方法</h2><ol>
<li><p><strong>全局引入整个命名空间</strong></p>
<ul>
<li><p><strong>语法:</strong></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> namespace_name;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>示例:</strong></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello, World!&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>说明</strong>: 这种方法将整个命名空间中的所有成员引入当前作用域，可以直接使用命名空间中的所有成员。需要注意的是，这样可能会引入命名冲突的问题，尤其是在大型项目中。</p>
</li>
</ul>
</li>
<li><p><strong>在局部作用域引入整个命名空间</strong></p>
<ul>
<li><p><strong>语法:</strong></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">function</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> namespace_name;<br>    <span class="hljs-comment">// 在此函数内可以使用该命名空间的成员</span><br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>示例:</strong></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myFunction</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>    cout &lt;&lt; <span class="hljs-string">&quot;This is inside a function.&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>说明</strong>: 这种用法只在局部作用域内（如函数内部）引入命名空间的成员，减少了全局命名冲突的风险。</p>
</li>
</ul>
</li>
<li><p><strong>引入特定命名空间成员</strong></p>
<ul>
<li><p><strong>语法:</strong></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> namespace_name::member_name;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>示例:</strong></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello, World!&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>说明</strong>: 这种方法只引入命名空间中的某个或某几个特定成员，避免了引入整个命名空间，减少命名冲突的可能性。</p>
</li>
</ul>
</li>
<li><p><strong>在类中引入命名空间</strong></p>
<ul>
<li><p><strong>语法:</strong></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> namespace_name;<br>    <span class="hljs-comment">// 类内可以使用该命名空间的成员</span><br>&#125;;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>示例:</strong></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-keyword">using</span> std::string;<br>        string name;<br>&#125;;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>说明</strong>: 在类定义中使用 <code>using</code> 引入命名空间或其成员，通常用于简化类内部的类型名称。</p>
</li>
</ul>
</li>
<li><p><strong>引入类型别名</strong></p>
<ul>
<li><p><strong>语法:</strong></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> alias_name = existing_type;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>示例:</strong></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> String = std::string;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    String name = <span class="hljs-string">&quot;Alice&quot;</span>;<br>    cout &lt;&lt; name &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>说明</strong>: 这种方法不是用于命名空间本身，而是通过 <code>using</code> 创建类型别名，简化代码中的类型名称。</p>
</li>
</ul>
</li>
</ol>
<h2 id="3、命名空间与预处理"><a href="#3、命名空间与预处理" class="headerlink" title="3、命名空间与预处理"></a>3、命名空间与预处理</h2><ol>
<li><p><strong>预处理指令（Preprocessing Directives）</strong></p>
<ul>
<li><p><strong>定义</strong>: 预处理指令是在编译器的预处理阶段执行的指令。它们的作用是在编译之前对代码进行处理，比如包含头文件、定义宏、条件编译等。</p>
</li>
<li><p><strong>示例</strong>: <code>#include</code>、<code>#define</code>、<code>#ifdef</code> 等。</p>
</li>
<li><p><strong><code>#include</code></strong>: 是一种预处理指令，用于在代码中包含头文件。预处理器在编译之前处理这些指令，将头文件的内容直接插入到源文件中。</p>
</li>
</ul>
</li>
<li><p><strong>编译阶段的语句（Compilation Stage Statements）</strong></p>
<ul>
<li><p><strong>定义</strong>: 编译阶段的语句是编译器在实际编译代码时处理的语句。这些语句在代码的逻辑结构中起作用，比如变量声明、控制结构、函数定义等。</p>
</li>
<li><p><strong><code>using</code></strong>: <code>using namespace std;</code> 是在编译阶段处理的语句，不是预处理指令。它告诉编译器在后续的代码中默认使用 <code>std</code> 命名空间中的成员。</p>
</li>
</ul>
</li>
<li><p><strong>详细的表述</strong>：</p>
<ul>
<li><p><strong><code>#include</code> 是预处理指令</strong>: 它在预处理阶段执行，也称为预编译指令（更常见的术语是“预处理指令”）。</p>
</li>
<li><p><strong><code>using</code> 是编译阶段的语句</strong>: 它在编译阶段执行，不是预处理指令。</p>
</li>
</ul>
</li>
</ol>
<p>命名空间是在编译阶段进行处理的，与预处理（如宏定义、头文件包含等）无直接关系。预处理器在编译之前展开宏、处理条件编译等，但命名空间是在编译时解析的。因此，命名空间不受预处理的影响。</p>
<h2 id="4、命名空间的嵌套"><a href="#4、命名空间的嵌套" class="headerlink" title="4、命名空间的嵌套"></a>4、命名空间的嵌套</h2><p>命名空间可以嵌套定义，这样可以进一步组织代码。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">namespace</span> OuterNamespace <br>&#123;<br>    <span class="hljs-keyword">namespace</span> InnerNamespace <br>    &#123;<br>        <span class="hljs-type">int</span> inner_variable = <span class="hljs-number">20</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>访问嵌套命名空间中的成员时，需要逐层指定命名空间名称：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> value = OuterNamespace::InnerNamespace::inner_variable;<br></code></pre></td></tr></table></figure>
<h2 id="5、匿名命名空间"><a href="#5、匿名命名空间" class="headerlink" title="5、匿名命名空间"></a>5、匿名命名空间</h2><p>匿名命名空间是没有名字的命名空间，通常用于限制变量或函数的作用范围，使其仅在定义它们的文件内可见。它的作用类似于 <code>static</code> 关键字修饰的全局变量或函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">namespace</span> <br>&#123;<br>    <span class="hljs-type">int</span> internal_variable = <span class="hljs-number">30</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>这里的 <code>internal_variable</code> 只能在定义它的文件中访问。</p>
<h2 id="6、命名空间的合并"><a href="#6、命名空间的合并" class="headerlink" title="6、命名空间的合并"></a>6、命名空间的合并</h2><ol>
<li><p><strong>同一命名空间的多个定义</strong>：你可以在不同的文件或同一文件的不同位置对同一个命名空间进行定义。编译器会将这些定义合并到一起，从而形成一个统一的命名空间。所有在这个命名空间中定义的成员（变量、函数、类等）都会属于同一个命名空间。</p>
</li>
<li><p><strong>命名空间成员的合并</strong>：命名空间内的成员会自动合并。这意味着在同一命名空间中定义的多个成员会共存，不会相互覆盖或冲突。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// File1.cpp</span><br><span class="hljs-keyword">namespace</span> MyNamespace &#123;<br>    <span class="hljs-type">int</span> var1 = <span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// File2.cpp</span><br><span class="hljs-keyword">namespace</span> MyNamespace &#123;<br>    <span class="hljs-type">int</span> var2 = <span class="hljs-number">20</span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Main.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;File1.cpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;File2.cpp&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    MyNamespace::<span class="hljs-built_in">func1</span>();  <span class="hljs-comment">// 可以访问 func1</span><br>    MyNamespace::<span class="hljs-built_in">func2</span>();  <span class="hljs-comment">// 可以访问 func2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在这个例子中，<code>MyNamespace</code> 在 <code>File1.cpp</code> 和 <code>File2.cpp</code> 中定义了不同的成员。最终，这些成员会在编译时合并到一个命名空间中，使得在主程序中可以访问到所有的成员。</p>
</li>
</ol>
<h2 id="7、实际应用中的建议"><a href="#7、实际应用中的建议" class="headerlink" title="7、实际应用中的建议"></a>7、实际应用中的建议</h2><ol>
<li><p><strong>避免命名冲突</strong>：在开发库或大型项目时，使用命名空间可以避免与其他库或模块的命名冲突。</p>
</li>
<li><p><strong>组织代码</strong>：通过将相关功能放入同一命名空间，可以提高代码的可读性和可维护性。</p>
</li>
<li><p><strong>减少全局污染</strong>：避免在全局作用域中使用 <code>using namespace std;</code>，以减少潜在的命名冲突。</p>
</li>
<li><p><strong>合并空间</strong>：命名空间名称相同时，编译器会将它们自动合并为一个统一的命名空间，它们的成员也会合并到这个统一的命名空间中，使得在主程序中可以访问到所有的成员。</p>
</li>
<li><p><strong>避免重复定义</strong>：需要避免在相同命名空间中重复定义同名标识符，合并并不意味着可以容纳重复的定义。</p>
</li>
</ol>
<h2 id="8、C-与C语言的区别"><a href="#8、C-与C语言的区别" class="headerlink" title="8、C++与C语言的区别"></a>8、C++与C语言的区别</h2><ol>
<li><p><strong>C++ 命名空间</strong>：存在但默认不使用。即使头文件包含了命名空间内容，你必须显式引用它们或使用 <code>using</code> 声明。</p>
</li>
<li><p><strong>C 语言头文件</strong>：没有命名空间概念。包含头文件后，声明的标识符立即可用，编译器和链接器会自动处理声明与定义之间的关联。</p>
</li>
</ol>
<h2 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h2><ol>
<li><p>命名空间的定义与使用</p>
<ul>
<li>命名空间通过 <code>namespace</code> 关键字定义，允许在特定作用域内定义变量、函数和类，避免命名冲突。成员访问需要使用 <code>命名空间名称::成员名称</code> 形式。</li>
</ul>
</li>
<li><p><code>using</code> 关键字的使用方法</p>
<ul>
<li><p><strong>全局引入</strong>：<code>using namespace namespace_name;</code> 引入整个命名空间，可能引发命名冲突。</p>
</li>
<li><p><strong>局部引入</strong>：<code>using namespace namespace_name;</code> 在函数内部引入，减少全局冲突。</p>
</li>
<li><p><strong>引入特定成员</strong>：<code>using namespace_name::member_name;</code> 只引入特定成员，避免冲突。</p>
</li>
<li><p><strong>类中引入</strong>：<code>using</code> 可以简化类内部的类型名称。</p>
</li>
<li><p><strong>类型别名</strong>：通过 <code>using alias_name = existing_type;</code> 创建类型别名，简化代码。</p>
</li>
</ul>
</li>
<li><p>命名空间与预处理</p>
<ul>
<li><p><strong>预处理指令</strong>：如 <code>#include</code> 是在编译前处理的，属于预处理阶段。</p>
</li>
<li><p><strong>编译阶段的语句</strong>：如 <code>using</code> 是在编译阶段处理的，不属于预处理。</p>
</li>
</ul>
</li>
<li><p>命名空间的嵌套</p>
<ul>
<li>命名空间可以嵌套定义，通过逐层指定命名空间名称访问成员。</li>
</ul>
</li>
<li><p>匿名命名空间</p>
<ul>
<li>匿名命名空间用于限制变量或函数的作用范围，使其仅在定义文件内可见，类似于 <code>static</code> 关键字。</li>
</ul>
</li>
<li><p>命名空间的合并</p>
<ul>
<li>同一命名空间的多个定义会自动合并，所有成员会共存，不会相互覆盖。</li>
</ul>
</li>
<li><p>实际应用中的建议</p>
<ul>
<li><p>避免命名冲突，组织代码，提高可读性。</p>
</li>
<li><p>减少全局污染，使用局部引入和特定成员引入。</p>
</li>
<li><p>避免重复定义，注意命名空间的合并特性。</p>
</li>
</ul>
</li>
<li><p>C++ 与 C 语言的区别</p>
<ul>
<li>C++ 中使用命名空间组织代码，必须显式使用；C 语言没有命名空间概念，包含头文件后声明立即可用。</li>
</ul>
</li>
</ol>
<p>命名空间在 C++ 中提供了代码组织和冲突避免的机制，通过灵活使用 <code>using</code> 关键字，可以简化代码并减少命名冲突。与 C 语言不同，C++ 的命名空间需要显式处理，支持嵌套、匿名命名空间和合并等功能，有效提高了代码的可维护性和组织性。</p>
<h1 id="三-、C-标准库"><a href="#三-、C-标准库" class="headerlink" title="三 、C++标准库"></a>三 、C++标准库</h1><h2 id="1、C-标准库中的命名空间"><a href="#1、C-标准库中的命名空间" class="headerlink" title="1、C++ 标准库中的命名空间"></a>1、C++ 标准库中的命名空间</h2><p>C++ 标准库中的命名空间主要是 <code>std</code>，它包含了绝大部分标准库的内容，包括函数、类、对象、模板等。尽管 <code>std</code> 是最主要的命名空间，但 C++ 标准库并不限于此。以下是 C++ 标准库中相关的命名空间以及它们的用途：</p>
<ol>
<li><p><strong><code>std</code> 命名空间</strong></p>
<ul>
<li><code>std</code> 是 C++ 标准库的核心命名空间，包含了大部分的标准库组件，包括容器、算法、输入输出、字符串处理、多线程支持等。以下是 <code>std</code> 命名空间中的一些重要内容：</li>
<li><strong>I/O 流：</strong> <code>std::cin</code>, <code>std::cout</code>, <code>std::cerr</code>, <code>std::clog</code>, <code>std::ifstream</code>, <code>std::ofstream</code>, <code>std::stringstream</code>, <code>std::ostringstream</code>, <code>std::istringstream</code></li>
<li><strong>容器：</strong> <code>std::vector</code>, <code>std::list</code>, <code>std::deque</code>, <code>std::set</code>, <code>std::map</code>, <code>std::unordered_map</code>, <code>std::unordered_set</code>, <code>std::array</code>, <code>std::stack</code>, <code>std::queue</code>, <code>std::priority_queue</code></li>
<li><strong>算法：</strong> <code>std::sort</code>, <code>std::find</code>, <code>std::for_each</code>, <code>std::accumulate</code>, <code>std::transform</code></li>
<li><strong>字符串处理：</strong> <code>std::string</code>, <code>std::wstring</code>, <code>std::u16string</code>, <code>std::u32string</code></li>
<li><strong>智能指针：</strong> <code>std::shared_ptr</code>, <code>std::unique_ptr</code>, <code>std::weak_ptr</code></li>
<li><strong>多线程：</strong> <code>std::thread</code>, <code>std::mutex</code>, <code>std::lock_guard</code>, <code>std::unique_lock</code>, <code>std::condition_variable</code>, <code>std::future</code>, <code>std::async</code></li>
<li><strong>异常处理：</strong> <code>std::exception</code>, <code>std::runtime_error</code>, <code>std::logic_error</code>, <code>std::bad_alloc</code></li>
</ul>
</li>
<li><p><code>std::chrono</code> <strong>命名空间</strong></p>
<ul>
<li><p><code>std::chrono</code> 是一个用于时间处理的命名空间，提供了高精度计时功能，能够处理时间点、时间间隔和时钟等。</p>
</li>
<li><p><strong>时间点与时间间隔：</strong> <code>std::chrono::duration</code>, <code>std::chrono::time_point</code></p>
</li>
<li><p><strong>时钟类型：</strong> <code>std::chrono::system_clock</code>, <code>std::chrono::steady_clock</code>, <code>std::chrono::high_resolution_clock</code></p>
</li>
<li><p><strong>时间单位：</strong> <code>std::chrono::milliseconds</code>, <code>std::chrono::seconds</code>, <code>std::chrono::minutes</code></p>
</li>
</ul>
</li>
<li><p><code>std::placeholders</code> <strong>命名空间</strong></p>
<ul>
<li><p><code>std::placeholders</code> 命名空间用于函数对象的占位符，常与 <code>std::bind</code> 结合使用，以便部分应用函数参数。</p>
</li>
<li><p><strong>占位符：</strong> <code>std::placeholders::_1</code>, <code>std::placeholders::_2</code>, <code>std::placeholders::_3</code> 等</p>
</li>
</ul>
</li>
<li><p><code>std::regex</code> <strong>命名空间</strong></p>
<ul>
<li><p><code>std::regex</code> 命名空间提供了正则表达式支持，用于字符串的模式匹配。</p>
</li>
<li><p><strong>正则表达式类：</strong> <code>std::regex</code>, <code>std::smatch</code>, <code>std::cmatch</code></p>
</li>
<li><p><strong>正则操作：</strong> <code>std::regex_match</code>, <code>std::regex_search</code>, <code>std::regex_replace</code></p>
</li>
</ul>
</li>
<li><p><code>std::literals</code> <strong>命名空间</strong></p>
<ul>
<li><p><code>std::literals</code> 提供了一些常用的字面量后缀，帮助简化代码书写。</p>
</li>
<li><p>子命名空间：</p>
<ul>
<li><code>std::string_literals</code> 提供字符串字面量，如 <code>&quot;hello&quot;s</code></li>
<li><code>std::chrono_literals</code> 提供时间字面量，如 <code>100ms</code>, <code>1h</code></li>
<li><code>std::complex_literals</code> 提供复数字面量，如 <code>1i</code></li>
</ul>
</li>
</ul>
</li>
<li><p><code>std::this_thread</code> <strong>命名空间</strong></p>
<ul>
<li><p><code>std::this_thread</code> 提供了与当前线程相关的功能。</p>
</li>
<li><p><strong>线程相关函数：</strong> <code>std::this_thread::sleep_for</code>, <code>std::this_thread::sleep_until</code>, <code>std::this_thread::yield</code></p>
</li>
</ul>
</li>
<li><p><code>std::filesystem</code> <strong>命名空间</strong></p>
<ul>
<li><p><code>std::filesystem</code> 提供了文件系统操作的支持（C++17 引入）。</p>
</li>
<li><p><strong>路径与文件操作：</strong> <code>std::filesystem::path</code>, <code>std::filesystem::create_directory</code>, <code>std::filesystem::remove</code>, <code>std::filesystem::exists</code></p>
</li>
</ul>
</li>
<li><p><code>std::experimental</code> <strong>命名空间</strong></p>
<ul>
<li><p><code>std::experimental</code> 包含了实验性功能或尚未成为正式标准的一些功能。这些功能可能在未来的 C++ 标准中正式采用。</p>
</li>
<li><p><strong>例如：</strong> <code>std::experimental::filesystem</code>（在 C++17 中转移到 <code>std::filesystem</code>）</p>
</li>
</ul>
</li>
<li><p><code>std::pmr</code> <strong>命名空间</strong></p>
<ul>
<li><p><code>std::pmr</code> 提供了与内存资源管理相关的功能（C++17 引入），主要用于自定义分配器的场景。</p>
</li>
<li><p><strong>内存资源类：</strong> <code>std::pmr::memory_resource</code>, <code>std::pmr::monotonic_buffer_resource</code></p>
</li>
<li><p><strong>pmr 容器：</strong> <code>std::pmr::vector</code>, <code>std::pmr::string</code></p>
</li>
</ul>
</li>
</ol>
<h2 id="2、C-标准库中的头文件"><a href="#2、C-标准库中的头文件" class="headerlink" title="2、C++ 标准库中的头文件"></a>2、C++ 标准库中的头文件</h2><p>C++ 标准库提供了大量的头文件，这些头文件包含了各种类、函数和模板，用于实现常见的编程功能。以下是一些常用的头文件及其对应的类或功能：</p>
<ol>
<li><p><strong>输入输出流</strong></p>
<ul>
<li><p><strong><code>&lt;iostream&gt;</code></strong>：提供输入输出流类，如 <code>std::cin</code>, <code>std::cout</code>, <code>std::cerr</code>。</p>
</li>
<li><p><strong><code>&lt;fstream&gt;</code></strong>：提供文件输入输出流类，如 <code>std::ifstream</code>, <code>std::ofstream</code>, <code>std::fstream</code>。</p>
</li>
</ul>
</li>
<li><p><strong>容器</strong></p>
<ul>
<li><p><strong><code>&lt;vector&gt;</code></strong>：动态数组容器，类 <code>std::vector</code>。</p>
</li>
<li><p><strong><code>&lt;list&gt;</code></strong>：双向链表容器，类 <code>std::list</code>。</p>
</li>
<li><p><strong><code>&lt;map&gt;</code></strong>：关联容器，键值对存储，类 <code>std::map</code>。</p>
</li>
<li><p><strong><code>&lt;set&gt;</code></strong>：集合容器，类 <code>std::set</code>。</p>
</li>
<li><p><strong><code>&lt;deque&gt;</code></strong>：双端队列容器，类 <code>std::deque</code>。</p>
</li>
</ul>
</li>
<li><p><strong>算法</strong></p>
<ul>
<li><p><strong><code>&lt;algorithm&gt;</code></strong>：提供通用算法，如排序、查找、复制、交换等。</p>
</li>
<li><p><strong><code>&lt;numeric&gt;</code></strong>：提供数值计算的算法，如累加、乘积、内积等。</p>
</li>
</ul>
</li>
<li><p><strong>字符串处理</strong></p>
<ul>
<li><strong><code>&lt;string&gt;</code></strong>：提供字符串类 <code>std::string</code> 及其相关操作。</li>
</ul>
</li>
<li><p><strong>异常处理</strong></p>
<ul>
<li><strong><code>&lt;stdexcept&gt;</code></strong>：定义标准异常类，如 <code>std::exception</code>, <code>std::runtime_error</code>。</li>
</ul>
</li>
<li><p><strong>多线程</strong></p>
<ul>
<li><p><strong><code>&lt;thread&gt;</code></strong>：提供多线程支持，类 <code>std::thread</code>。</p>
</li>
<li><p><strong><code>&lt;mutex&gt;</code></strong>：提供互斥锁，类 <code>std::mutex</code>。</p>
</li>
</ul>
</li>
<li><p><strong>智能指针</strong></p>
<ul>
<li><strong><code>&lt;memory&gt;</code></strong>：提供智能指针类，如 <code>std::shared_ptr</code>, <code>std::unique_ptr</code>, <code>std::weak_ptr</code>。</li>
</ul>
</li>
</ol>
<h2 id="3、C-标准库与-STL-的关系"><a href="#3、C-标准库与-STL-的关系" class="headerlink" title="3、C++ 标准库与 STL 的关系"></a>3、C++ 标准库与 STL 的关系</h2><p><strong>STL</strong>（Standard Template Library，标准模板库）实际上是 C++ 标准库的一部分，但它并不是整个标准库。STL 是 C++ 标准库中提供的一套模板类和函数，主要包括容器（如 <code>vector</code>、<code>list</code>）、算法（如 <code>sort</code>、<code>find</code>）和迭代器。这些组件提供了泛型编程的能力，允许你编写独立于具体数据类型的代码。</p>
<p><strong>区别与联系</strong></p>
<ol>
<li><p><strong>STL 是标准库的一部分</strong>：标准库包含了 STL，但也包含了其他不属于 STL 的部分，如输入输出流、字符串处理、多线程支持等。</p>
</li>
<li><p><strong>STL 的组成</strong>：</p>
<ul>
<li><strong>容器</strong>：如 <code>std::vector</code>, <code>std::list</code>, <code>std::map</code> 等。</li>
<li><strong>算法</strong>：如 <code>std::sort</code>, <code>std::find</code>, <code>std::accumulate</code> 等。</li>
<li><strong>迭代器</strong>：如输入迭代器、输出迭代器、双向迭代器等，用于遍历容器。</li>
</ul>
</li>
<li><p><strong>标准库的范围更广</strong>：除了 STL 的组件外，标准库还包括了输入输出功能、异常处理、正则表达式、多线程支持、智能指针等。</p>
</li>
</ol>
<h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><ol>
<li><p>C++ 标准库是一个强大且广泛的工具集，包含了许多命名空间、类、函数和模板，旨在简化开发过程并提供各种常见的编程功能。尽管 <code>std</code> 是最主要的命名空间，但标准库根据不同的功能模块划分了多个子命名空间，如 <code>std::chrono</code> 用于时间处理，<code>std::regex</code> 用于正则表达式，<code>std::filesystem</code> 用于文件系统操作等。</p>
</li>
<li><p>标准库中的头文件提供了对这些功能的访问，如 <code>&lt;iostream&gt;</code> 提供输入输出流功能，<code>&lt;vector&gt;</code> 提供动态数组容器，<code>&lt;algorithm&gt;</code> 提供常用的算法等。</p>
</li>
<li><p><strong>STL</strong>（标准模板库）是 C++ 标准库中的一部分，专注于泛型编程，主要包括容器、算法和迭代器。尽管 STL 是标准库的核心组件，但标准库的范围比 STL 更广，还包括 I/O 操作、多线程支持、智能指针、异常处理等功能。</p>
</li>
</ol>
<p>理解并熟练使用 C++ 标准库和 STL 可以大大提高开发效率，并帮助你编写更简洁、可维护和高效的代码。</p>
<h1 id="四、I-O（输入输出）"><a href="#四、I-O（输入输出）" class="headerlink" title="四、I/O（输入输出）"></a>四、I/O（输入输出）</h1><h2 id="1、C-的输入过程"><a href="#1、C-的输入过程" class="headerlink" title="1、C++ 的输入过程"></a>1、C++ 的输入过程</h2><ol>
<li><p><strong>用户输入</strong>：当用户在键盘上输入数据时，这些数据首先被存储在一个称为“输入缓冲区”的内存区域中。这个缓冲区由操作系统管理，用于暂时存放输入的数据。</p>
</li>
<li><p><strong>数据进入缓冲区</strong>：用户输入的数据通过标准输入流（<code>std::cin</code>）进入输入缓冲区。在用户按下回车键（或其他输入结束符）后，输入缓冲区中的数据被视为完整的输入，准备供程序读取。</p>
</li>
<li><p><strong>数据读取和类型转换</strong>：</p>
<ul>
<li><p><strong><code>std::cin</code> 的作用</strong>：<code>std::cin</code> 会从输入缓冲区读取数据，并根据程序中定义的数据对象的类型，将字符数据智能转换为该类型的数据。</p>
</li>
<li><p><strong><code>&gt;&gt;</code> 运算符</strong>：<code>&gt;&gt;</code> 运算符用于将转换后的数据从流中提取，并赋值给相应的数据对象。例如，如果你使用 <code>std::cin &gt;&gt; int_var;</code>，输入缓冲区中的字符数据会被转换为整数类型，并存储在 <code>int_var</code> 变量中。</p>
</li>
</ul>
</li>
<li><p><strong>流程图：</strong></p>
</li>
</ol>
<p><img src="https://s1.vika.cn/space/2024/08/24/9cde488d79524428bdc1b0d5813de082" alt="C++输入操作流程图"></p>
<h2 id="2、C-的输出过程"><a href="#2、C-的输出过程" class="headerlink" title="2、C++ 的输出过程"></a>2、C++ 的输出过程</h2><ol>
<li><p><strong>数据的智能转换</strong>：</p>
<ul>
<li><p><strong><code>std::cout</code> 的作用</strong>：<code>std::cout</code> 负责将数据对象的内容智能转换为适合输出的字符或字符串形式。</p>
</li>
<li><p><strong><code>&lt;&lt;</code> 运算符</strong>：<code>&lt;&lt;</code> 运算符将数据从程序中推送到输出流，然后暂时存储在输出缓冲区中。</p>
</li>
</ul>
</li>
<li><p><strong>数据进入输出缓冲区</strong>：在 C++ 中，数据通过标准输出流（<code>std::cout</code>）进入一个称为“输出缓冲区”的区域。这个缓冲区暂时存储将要输出的数据，以便优化输出操作的性能。</p>
</li>
<li><p><strong>数据输出到设备</strong>：输出缓冲区中的数据会根据缓冲区的刷新机制（如缓冲区满、行缓冲、显式刷新、程序结束）通过标准输出流（<code>std::cout</code>）刷新到输出设备上（通常是屏幕）。</p>
</li>
<li><p><strong>流程图：</strong></p>
<p> <img src="https://s1.vika.cn/space/2024/08/24/cd072e342d234084ac74c0de14f9a69f" alt="C++输出操作流程图"></p>
</li>
</ol>
<h2 id="3、C-语言的输入过程"><a href="#3、C-语言的输入过程" class="headerlink" title="3、C 语言的输入过程"></a>3、C 语言的输入过程</h2><ol>
<li><p><strong>用户输入</strong>：在 C 语言中，用户输入的数据首先也被存储在输入缓冲区中，类似于 C++。</p>
</li>
<li><p><strong>数据进入缓冲区</strong>：输入的数据通过标准输入流（<code>stdin</code>）进入输入缓冲区。当用户按下“回车”键后，缓冲区中的数据被视为完整输入，准备供程序读取。</p>
</li>
<li><p><strong>数据读取和格式转换</strong>：</p>
<ul>
<li><p><strong><code>scanf</code> 函数的作用</strong>：<code>scanf</code> 函数通过标准输入流（<code>stdin</code>）从输入缓冲区读取数据，并根据指定的格式字符串（如 <code>%d</code>, <code>%f</code> 等）将字符数据转换为相应类型的数据。这种转换通常被称为“格式化输输入”。</p>
</li>
<li><p><strong>指针赋值</strong>：转换后的数据通过指针传递给指定的变量。例如，<code>scanf(&quot;%d&quot;, &amp;int_var);</code> 将缓冲区中的字符数据解析为整数，并赋值给 <code>int_var</code> 变量。</p>
</li>
</ul>
</li>
<li><p><strong>流程图：</strong></p>
<p> <img src="https://s1.vika.cn/space/2024/08/24/38797841187d4ddd8b0a129e7863b91a" alt="C语言输入操作流程图"></p>
</li>
</ol>
<h2 id="4、C-语言的输出过程"><a href="#4、C-语言的输出过程" class="headerlink" title="4、C 语言的输出过程"></a>4、C 语言的输出过程</h2><ol>
<li><p><strong>数据的格式转换</strong>：</p>
<ul>
<li><p><strong><code>printf</code> 函数的作用</strong>：<code>printf</code> 函数根据指定的格式转换将数据对象的内容转换为适合输出的字符或字符串形式，这种转换通常被称为“格式化输出”。</p>
</li>
<li><p><strong>格式化数据</strong>：例如，<code>printf(&quot;%d&quot;, int_var);</code> 将整数 <code>int_var</code> 转换为字符形式并存储在输出缓冲区中。</p>
</li>
</ul>
</li>
<li><p><strong>数据进入输出缓冲区</strong>：数据通过标准输出流（<code>stdout</code>）进入输出缓冲区，类似于 C++。</p>
</li>
<li><p><strong>数据输出到设备</strong>：与 C++ 类似，输出缓冲区中的数据会根据缓冲区的刷新机制（如缓冲区满、行缓冲、显式刷新、程序结束）通过标准输出流（<code>stdout</code>）刷新到输出设备上（通常是屏幕）。</p>
</li>
<li><p><strong>流程图：</strong></p>
<p> <img src="https://s1.vika.cn/space/2024/08/24/e644e2f741ca4846b2cc61602fd67df0" alt="C语言输出操作流程图"></p>
</li>
</ol>
<h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><ol>
<li><p><strong>输入</strong>：无论在 C++ 还是 C 中，输入数据都会先通过标准输入流进入输入缓冲区，然后数据会通过标准输入流被全局对象或者特定的函数（如 <code>std::cin</code> 或 <code>scanf</code>）读取和处理。数据会根据指定的类型进行（<strong>智能</strong>或<strong>格式化</strong>）转换，最终赋值给相应的变量。</p>
</li>
<li><p><strong>输出</strong>：无论在 C++ 还是 C 中，数据首先会被全局对象或者特定的函数（如 <code>std::cout</code> 或 <code>printf</code>）进行（<strong>智能</strong>或<strong>格式化</strong>）处理，然后数据通过标准输出流进入输出缓冲区，最终数据会根据缓冲区的刷新机制，通过标准输出流刷新到输出设备上。</p>
</li>
</ol>
<p>无论在 C++ 还是 C 中，输入输出操作都依赖于标准流和缓冲区的机制，通过全局对象或者特定的函数实现数据的读取、格式化处理和输出。</p>
<h1 id="五、换行符"><a href="#五、换行符" class="headerlink" title="五、换行符"></a>五、换行符</h1><p><code>endl</code> 和 <code>\n</code> 都是用于在C++中输出换行符的方式，但它们有一些重要的区别。</p>
<h2 id="1、-n-换行符"><a href="#1、-n-换行符" class="headerlink" title="1、\n 换行符"></a>1、\n 换行符</h2><ol>
<li><p><strong>概念</strong>: <code>\n</code> 是一个表示换行的字符，称为“换行符”。</p>
</li>
<li><p><strong>使用</strong>: 当使用 <code>\n</code> 时，它会在控制台输出一个换行，但不会做其他任何操作。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello\n&quot;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;World\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>输出：</p>
 <figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">Hello<br>World<br><br></code></pre></td></tr></table></figure>
</li>
</ol>
<p>在这个例子中，<code>\n</code> 使得“World”在新的一行输出。</p>
<h2 id="2、endl-操作符"><a href="#2、endl-操作符" class="headerlink" title="2、endl 操作符"></a>2、endl 操作符</h2><ol>
<li><p><strong>概念</strong>: <code>endl</code> 是 C++ 标准库中的一个操作符，用于在输出流中插入换行符并刷新输出缓冲区。</p>
</li>
<li><p><strong>使用</strong>: 当使用 <code>std::endl</code> 时，它不仅会在控制台输出一个换行符，还会强制刷新输出缓冲区。</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;World&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>输出：</p>
 <figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">Hello<br>World<br><br></code></pre></td></tr></table></figure>
</li>
</ol>
<p>在这个例子中，<code>endl</code> 不仅使得“World”在新的一行输出，还强制刷新了缓冲区。</p>
<h2 id="3、区别总结"><a href="#3、区别总结" class="headerlink" title="3、区别总结"></a>3、区别总结</h2><ol>
<li><p><strong>换行效果</strong>: <code>\n</code> 和 <code>endl</code> 都可以实现换行效果，在输出内容到控制台时表现一致。</p>
</li>
<li><p><strong>缓冲区刷新</strong>：对于行缓冲的情况，遇到 <code>\n</code> 或<code>endl</code> 时会刷新缓冲区。而在全缓冲的情况下，<code>endl</code> 会强制刷新输出缓冲区，而 <code>\n</code> 不会。（缓冲区刷新意味着程序会立即将缓冲区中的内容输出到控制台或文件中，确保输出的内容立即可见。这在需要立即看到输出结果的场景中是很有用的）。</p>
</li>
</ol>
<h2 id="4、何时使用"><a href="#4、何时使用" class="headerlink" title="4、何时使用"></a>4、何时使用</h2><ol>
<li><p><strong>性能考量</strong>: 由于 <code>endl</code> 每次都会刷新缓冲区，频繁使用它可能会影响程序的性能。通常情况下，如果不需要立即刷新输出缓冲区，可以使用 <code>\n</code> 来代替 <code>endl</code>。</p>
</li>
<li><p><strong>特殊场景</strong>: 如果你确实需要立即将缓冲区中的内容输出到控制台，比如在调试或实时日志记录中，使用 <code>endl</code> 更为合适。</p>
</li>
</ol>
<h2 id="5、总结-1"><a href="#5、总结-1" class="headerlink" title="5、总结"></a>5、总结</h2><ol>
<li><p>在 <strong>行缓冲</strong> 的情况下，<code>std::endl</code> 和 <code>\n</code> 的行为看起来相似，但 <code>std::endl</code> 总是会强制刷新缓冲区。</p>
</li>
<li><p>在 <strong>全缓冲</strong> 的情况下，<code>std::endl</code> 强制刷新缓冲区，而 <code>\n</code> 不会，这可能导致延迟输出。</p>
</li>
<li><p><strong><code>std::endl</code> 用于确保输出立即生效，<code>\n</code> 用于性能优先的场景</strong>。</p>
</li>
</ol>
<p>如果你需要立即看到输出结果的场景，使用<code>std::endl</code> 强制刷新缓冲区，确保立即输出，而 <code>\n</code> 更适合需要更高性能的场景。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
